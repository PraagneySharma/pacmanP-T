
#FSE
#TARUN AND PRAAGNEY
from pygame import *
from random import *
font.init()
mixer.init()

creditFont=font.SysFont("Times New Roman",80)
screen=display.set_mode((1200,900))

#FONTS FOR HIGH SCORE
font1=font.Font("public_pixel/PublicPixel.ttf",30)
font2=font.Font("public_pixel/PublicPixel.ttf",20)

#MUSIC FOR GAME
intro=mixer.Sound("pacman audio/intro.wav")
lifedeath=mixer.Sound("pacman audio/lifedeath.mp3")
eat=mixer.Sound("pacman audio/eat.wav")
death=mixer.Sound("pacman audio/death.wav")
eatghost=mixer.Sound("pacman audio/eatghost.wav")

#VOLUME OF GMUSIC
intro.set_volume(0.01)
eat.set_volume(0.01)
death.set_volume(0.01)
eatghost.set_volume(0.01)
lifedeath.set_volume(0.01)


##scoreFont=font.SysFont("Public Pixel",30)
def menu():
    logopic=image.load("pics1/logo.png")
    creditpic=image.load("pics1/credits.png")
    controlspic=image.load("pics1/controls.png")
    playpic=image.load("pics1/play.png")
    background=image.load("pics1/background.jpg")
    running=True
    
    buttons=[Rect(397,300+x*140,400,110) for x in range(3)] #drawing 3 buttons PLAY, CREDITS, CONTROLS
    
    while running:
        
        
        for evt in event.get():
            if evt.type==QUIT:
                return "exit"
        screen.fill("black")
        screen.blit(background,(0,0))
        screen.blit(logopic,(270,80))
        
        
        mx,my=mouse.get_pos()
        mb=mouse.get_pressed()
        
        for b in buttons:
            draw.rect(screen,("yellow"),b)
        screen.blit(playpic,(490,326))
        screen.blit(controlspic,(400,606))
        screen.blit(creditpic,(425,466))
        for i in range(3):
            draw.rect(screen,"black",(397,300+i*140,400,110),4)
        
        if mb[0]:
            if buttons[0].collidepoint(mx,my):
                lives=3
                framecounter=0                       #IF pressed play reset game  
                for coin in makeCoins(my2d):
                    coins.append(coin)
                for power in makePowerups(my2d):
                    powers.append(power)
                pacman=[50,40,0,0]
                pacmanmove = [0,0]
                loadedpacmanmove=[0,0]

                blueghost=[580,430,0,0]    
                blueghostmove=[-4,0]
                redghost=[580,430,0,0]    
                redghostmove=[-4,0]
                yellowghost=[580,430,0,0]    
                yellowghostmove=[-4,0]
                orangeghost=[580,430,0,0]    
                orangeghostmove=[-4,0]
                return "level1"
          
            if buttons[1].collidepoint(mx,my):
                return "credits"
            
            if buttons[2].collidepoint(mx,my):                
                return "controls"
            
        if buttons[0].collidepoint(mx,my):
            draw.rect(screen,"red",(buttons[0]),3)            
        if buttons[1].collidepoint(mx,my):
            draw.rect(screen,"red",(buttons[1]),3)
        if buttons[2].collidepoint(mx,my):
            draw.rect(screen,"red",(buttons[2]),3)
            
        display.flip()
        
def credit():
    running=True
    backArrow=transform.scale(image.load("pics1/backArrow.png"),(250,190))
    backRect=Rect(50,25,250,190)
    fireworkcredit=image.load("pics1/fireworkcreditpage.jpg")
    creditPic=creditFont.render("CREDITS",False,"white")
    TarunPic=creditFont.render("Tarun Govindarajan",False,"white")
    PraagneyPic=creditFont.render("Praagney Sharma",False,"white")
    while running:
        
        for evt in event.get():
            if evt.type==QUIT:
                running=False
        screen.fill("black")
        mx,my=mouse.get_pos()
        mb=mouse.get_pressed()

        screen.blit(fireworkcredit,(0,0))        
        screen.blit(creditPic,(450,75))
        screen.blit(TarunPic,(310,300))
        screen.blit(PraagneyPic,(350,400))
        screen.blit(backArrow,(55,30))

        if mb[0]:
            if backRect.collidepoint(mx,my):
                return "menu"

        display.flip()
    return "menu"

def controls():
    running=True
    controlpage=image.load("pics1/control page.png")
    backRect=Rect(50,25,250,190)
    while running:        
        for evt in event.get():
            if evt.type==QUIT:
                running=False
        screen.fill("blue")
        mx,my=mouse.get_pos()
        mb=mouse.get_pressed()
        screen.blit(controlpage,(0,0))

        if mb[0]:
            if backRect.collidepoint(mx,my):
                return "menu"
        
        display.flip()
    return "menu"


##player111=Rect(565,825,0,0)

#brickPic=image.load("pics1/brick.png")


#WALLS
my2d=   [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,3,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]



def makeRects(mywalls):
    myRects=[]
    myFixRect=[]
    y=0
    for row in range(len(mywalls)):
        for col in range(len(mywalls[row])):
            #print(row,col)
            if mywalls[row][col]==1:  #Make a wall at "1" in the list
                #screen.blit(brickPic, (col * 32, row * 32))
                myRects.append(Rect(col * 10, row * 10,10,10))
    return myRects    
    
        
    display.flip()
        
def makeCoins(grid):
    myCoins=[]
    for row in range(len(grid)):
        for col in range(len(grid[row])):
            if grid[row][col]==2: #wherever theres a 2 add a coin 
                myCoins.append(Rect(col*10,row*10,15,15))
    return myCoins

def makePowerups(grid):
    myPowers=[]
    for row in range(len(grid)):
        for col in range(len(grid[row])):
            if grid[row][col]==3: #wherever theres a 3 add a PowerUp (bigger coin) 
                myPowers.append(Rect(col*10,row*10,30,30))
    return myPowers


coins=makeCoins(my2d)
powers=makePowerups(my2d)

#LOADING IMAGES
lvl1=image.load("pics1/levelone.png")
lvl1=transform.scale(lvl1,(200,25))
scoreimg=image.load("pics1/Score.png")
scoreimg=transform.scale(scoreimg,(150,30))
lvlcomplete=image.load("pics1/levelcomplete.png")
lvlcomplete=transform.scale(lvlcomplete,(600,248))
gameover=image.load("pics1/gameover.png")
heart=image.load("pics1/heart.png")
volumepic=image.load("pics1/volume.jpg")
volumepic=transform.scale(volumepic,(50,50))
volumemutepic=image.load("pics1/volumemute.jpg")
volumemutepic=transform.scale(volumemutepic,(50,50))

def drawScene(screen,player,walls,picList,playermove,blueghost,redghost,yellowghost,orangeghost,blueimgs,blueghostmove,redimgs,redghostmove,pinkimgs,pinkghostmove,orangeimgs,orangeghostmove,depics):

    #rects of all the ghosts
    enemyRects=[(Rect(blueghost[0],blueghost[1],30,30)),(Rect(redghost[0],redghost[1],30,30)),(Rect(yellowghost[0],yellowghost[1],30,30)),(Rect(orangeghost[0],orangeghost[1],30,30))]

    global lives
    global framecounter
    global score
    global powerframe
    
    row=int(player[2]) #variable used for direction player is facing
    col=int(player[3]) #variable used for animation 
    #print(row,col)
    invisPac=Rect(player[0]+playermove[0],player[1]+playermove[1],29,29) #this is the pacman rect
    
            
    screen.blit(picList[row][col],(player[0],player[1])) # mouth moving animation

        
    enemypoints=200
        
                
    if powerframe>0 and invisPac.colliderect(Rect(blueghost[0],blueghost[1],30,30)):      #IF POWERUPS are on and collide with a ghost - get score and respawn the ghost  
        blueghost[0]=580 
        blueghost[1]=430
        score+=200
    if powerframe>0 and invisPac.colliderect(Rect(redghost[0],redghost[1],30,30)):
        redghost[0]=580
        redghost[1]=430
        score+=200
    if powerframe>0 and invisPac.colliderect(Rect(yellowghost[0],yellowghost[1],30,30)):
        yellowghost[0]=580
        yellowghost[1]=430
        score+=200
    if powerframe>0 and invisPac.colliderect(Rect(orangeghost[0],orangeghost[1],30,30)):
        orangeghost[0]=580
        orangeghost[1]=430
        score+=200
    
    if powerframe>0:
        for enemy in enemyRects:
            if invisPac.colliderect(enemy): #if collding with enemy with powerup on 
                eat.stop()           #play/stop music 
                eatghost.play()
    

    else:
        if invisPac.colliderect(Rect(blueghost[0],blueghost[1],30,30)) or invisPac.colliderect(Rect(redghost[0],redghost[1],30,30)) or invisPac.colliderect(Rect(yellowghost[0],yellowghost[1],30,30)) or invisPac.colliderect(Rect(orangeghost[0],orangeghost[1],30,30)):                         
            lives-=1
                        
            eat.stop()
            lifedeath.play()

            if lives==0:
                draw.rect(screen,"black",(990,650,70,60)) #get rid of heart image
                death.play()
                
                while lives==0:                    
                    player[3]=player[3]+0.02 #drawing animation while pacman has 0 lives 
                    if player[3]>10:
                        player[3]=9 #if animation ends keep the last image of the animation
                    col=int(player[3])
                    screen.blit(depics[col],(player[0],player[1])) #blitting the animation at pacmans x and y values
                    framecounter+=1
                    screen.blit(gameover,(450,425)) #blitting game over while lives is 0
                    display.flip()
                    if framecounter==1000: 
                        break  #so game doesnt lag

                    if framecounter>981:
                        return "menu" #after full animation is drawn and gameover is blit - send to menu
                        
                
            


            framecounter=0
            blueghost[0]=580  #RESETTING ALL OF PACMAN WHEN GAME ENDS
            redghost[0]=580
            yellowghost[0]=580
            orangeghost[0]=580            
            blueghost[1]=430
            redghost[1]=430
            yellowghost[1]=430
            orangeghost[1]=430

            player[0]=50
            playermove[0]=0
            playermove[1]=0
            player[1]=40

            

##    for w in walls:
##        #pass
##        draw.rect(screen,"red",w)
        
    
    for c in coins:
        draw.ellipse(screen,"white",c) 

    for p in powers:
        draw.ellipse(screen,"yellow",p)
        
    rowBlue=int(blueghost[2])  #getting interger value of ghost direction
    rowRed=int(redghost[2])
    rowPink=int(yellowghost[2])
    rowOrange=int(orangeghost[2])

    global ghosts #list of all ghosts
    
    for ghost in ghosts:
        rowFlee=int(ghost[2])

    if powerframe>0:
        
        for ghost in ghosts:
            #print(ghost)
            screen.blit(fleeimgs,(ghost[0],ghost[1])) #blitting vulnerable images for ghosts
    else:
        screen.blit(blueimgs[rowBlue][0],(blueghost[0],blueghost[1])) #blitting normal ghost images
        screen.blit(redimgs[rowRed][0],(redghost[0],redghost[1]))
        screen.blit(pinkimgs[rowPink][0],(yellowghost[0],yellowghost[1]))
        screen.blit(orangeimgs[rowOrange][0],(orangeghost[0],orangeghost[1]))
        

    display.flip()

playerspeed=4

def moveCheck(player, playermove, loadedplayermove, walls):
    invisPac=Rect(player[0]+loadedplayermove[0],player[1]+loadedplayermove[1],32-playerspeed,32-playerspeed)  #Rectangle at pacmans postion (not actually being drawn)
                                                                                      #loadedplayermove checks if pacman can move that way 
    if invisPac.collidelist(walls)==-1:                                               #if pacman can move in that direction it will return "-1"
        playermove[0]=loadedplayermove[0]                                             #when it returns -1 make the the loadedplayermove = playermove           
        playermove[1]=loadedplayermove[1]                                             #This makes pacman move in the direction it wants to move in     
def movePlayer(player, playermove, loadedplayermove, walls):

    global framecounter

    if framecounter<255: #making a delay before pacman can move
        playermove[0]=0
        playermove[1]=0

    keys = key.get_pressed() 

    if keys[K_RIGHT]:        
        loadedplayermove[0] = playerspeed # if u press right it will make invis pac move in that direction to make sure if pacman can move in that direction
        loadedplayermove[1] = 0            
    elif keys[K_LEFT]:                                                            
        loadedplayermove[0] = -playerspeed
        loadedplayermove[1] = 0            
    elif keys[K_DOWN]:     
        loadedplayermove[1] = playerspeed
        loadedplayermove[0] = 0            
    elif keys[K_UP]:                                                             
        loadedplayermove[1]= -playerspeed
        loadedplayermove[0] = 0

    if playermove[0]==0:  #if not moving horizontally
        if playermove[1]==playerspeed: #if moving Down
            player[2]=1 #down animation
        else:
            player[2]=2 #if moving Up - Up animation
    elif playermove[0]==playerspeed: #if moving right
            player[2]=0 #right animation
    else:
        player[2]=3 #if moving Left - left animaiton
                

    if hitWalls(player[0]+playermove[0],player[1],walls)==-1: #if not colliding with a wall then add the playermove onto player, which changes the pacman postion
        player[0] += playermove[0]

    if hitWalls(player[0],player[1]+playermove[1],walls)==-1:
        player[1] += playermove[1]

    player[3]=player[3]+0.2 #used for opening and closing animation of mouth
    
    if player[3]>=2: #if players mouth is fully open 
        player[3]=0  #go back to mouth almost closed

    if player[0]<=0:      #if exit map through secret tunnel
        player[0]=1200    #enter back on other side
    if player[0]>=1210:
        player[0]=0

def deathpics(name,start,end):
    dpics=[]
    for i in range(start,end+1):
        dpics.append(image.load(f"deathpics/{name}{i:01}.png"))
    return dpics

def moveGhost(ghost, ghostmove, player, walls, ghosts, ghostsmove,enemies,enemiesmove):
    global powerframe
    global framecounter
    global score
    speed=2+score//3500 #everytime score is above 3500 increase speed


        
    blueghost=[580,430,0,0]    
    redghost=[580,430,0,0]    
    yellowghost=[580,430,0,0]    
    orangeghost=[580,430,0,0]             
    if framecounter>1300:                           #if ghosts collide with eachother and they are going same direction make one of the ghosts go the opposite way
        for i in range(len(enemies)):
            if enemies[0][0]==enemies[1][0]:
                enemiesmove[0][0]=-enemiesmove[0][0]

    avd=[] #avaibalbe direction - if ghost can move that way
    #invisghostRect=Rect(ghost[0]+ghostmove[0],ghost[1]+ghostmove[1],28,28)

    invisupghostRect=Rect(ghost[0],ghost[1]-speed,31-speed,31-speed)    #ALWAYS checking if ghost can move UP, DOWN, LEFT, OR RIGHT
    if invisupghostRect.collidelist(walls)==-1:                       #If it can move a direction add the direction to the available directions list
        avd.append([0,-speed])        

    invisdownghostRect=Rect(ghost[0],ghost[1]+speed,31-speed,31-speed)
    if invisdownghostRect.collidelist(walls)==-1:
        avd.append([0,speed])

    invisleftghostRect=Rect(ghost[0]-speed,ghost[1],31-speed,31-speed)
    if invisleftghostRect.collidelist(walls)==-1:            
        avd.append([-speed,0])

    invisrightghostRect=Rect(ghost[0]+speed,ghost[1],31-speed,31-speed)    
    if invisrightghostRect.collidelist(walls)==-1:
        avd.append([speed,0])

    backwards = [-ghostmove[0],-ghostmove[1]]  #this is the direction of pacman if it was going backwards 
    if avd == [backwards]:                     #if you hit a deadend you will go backwards -ONLY EXCEPTION - IF NOT, PACMAN WILL EXIT MAP
        ghostmove[0]=-ghostmove[0]             
        ghostmove[1]=-ghostmove[1]             
    else:
        if backwards in avd:
            avd.remove(backwards)              #if not hitting deadend it will remove going backwards from avaialbe directions so it doesnt come back where it came from
        if len(avd) == 1:                      #if only 1 avaaibalbe direction for a ghost
            ghostmove[0] = avd[0][0]           
            ghostmove[1] = avd[0][1]
            
        else:
            hdif = player[0] - ghost[0]       #difference of horizontal value of specific ghost and player
            if hdif > 0:                      #if player is more right of ghost
                hdif = 1                      #hdif=1 - to make caluclations easier
            elif hdif < 0:                    #if player is more left of ghost
                hdif = -1
            else: hdif = 0                    #if no differnce of horizontal value hdif=0

            vdif = player[1] - ghost[1]
            if vdif > 0:
                vdif = 1
            elif vdif < 0:
                vdif = -1
            else: vdif = 0

            if powerframe>0:                                                      #if you have a powerup
                for direction in avd:                                             #for specific direction in the available direcitons
                    if direction[0] != hdif*speed and direction[1] != vdif*speed: #if going in a direction doesnt match up with the direction that brings you closer to pacman(hdif*speed)
                        ghostmove[0] = direction[0]                               #go in that direction
                        ghostmove[1] = direction[1]
                        break
                    elif direction[1] != vdif*speed:
                        ghostmove[0] = direction[0]
                        ghostmove[1] = direction[1]
                    elif direction[0] != hdif*speed:
                        ghostmove[0] = direction[0]
                        ghostmove[1] = direction[1]
            else:                                                                 #if u dont have powerup 
                for direction in avd:                                              
                    if direction[0] == hdif*speed and direction[1] == vdif*speed: #make the ghost go in the direction that brings u closer to pacman
                        ghostmove[0] = direction[0]                               #horizontally
                        ghostmove[1] = direction[1]
                        break
                    elif direction[1] == vdif*speed:                              #vertiacallly
                        ghostmove[0] = direction[0]
                        ghostmove[1] = direction[1]
                    elif direction[0] == hdif*speed:
                        ghostmove[0] = direction[0]
                        ghostmove[1] = direction[1]                
                
    ghost[0]+=ghostmove[0]                            #increase x and y value of ghost to move it
    ghost[1]+=ghostmove[1]

    if ghost[0]<=0:                                  #if ghost goes out  of screen through secret tunnel make it enter on other side
        ghost[0]=1200
    if ghost[0]>=1210:
        ghost[0]=0

    #right - 0 , down - 1 , up - 2 , left - 3
    if ghostmove[0]==0:                           
        if ghostmove[1]==4:           #if moveing down
            ghost[2]=1               #down aniamtion
        else:
            ghost[2]=2                #up animation
    elif ghostmove[0]==4:           #moving right
            ghost[2]=0               #right animation
    else:
        ghost[2]=3                  #left animation

    
        
def highscore():

    global score,highest
    
    scores=[]
    wscorefile=open("wscore.txt","r") #opening file for reading
    line=wscorefile.readlines()
    line.sort(reverse=True) # sorting the scores from low to high
    hiscore=line[0].strip() # stripping the highest one (index at 0 because of sorting)
    wscorefile.close()
    wscorefile=open("wscore.txt","w")  #open same file for writing
    if score>int(hiscore):             #if the current score is larger than the highest one
        wscorefile.write(f"{score}")   #write the new high score
    elif score<=int(hiscore):          #if it is smaller, continue to write the current high score
        wscorefile.write(hiscore)
    
    wscorefile.close()    
    wscorefile=open("wscore.txt","r")
    highest=wscorefile.readline().strip()
    wscorefile.close()
        
     
def hitWalls(x,y,walls):
    playerRect = Rect(x,y,28,28)  #player's rect
    return playerRect.collidelist(walls)

def addPics(name,start,end):
    '''
    this function RETURNS a LIST of pictures (1-D list)
    '''
    mypics=[]
    for i in range(start,end+1):
        mypics.append(image.load(f"pacmanSprites/{name}{i:03}.png"))
    
    return mypics
##def enemyPics(name,start,end):
##    enemypics=[]
##    for i in range(start,end+1):
##        enemypics.append(image.load(f"enemypics/{name}{i:01}.png"))

def bluePics(name,start,end):
    bluepics=[]
    for i in range(start,end+1):
        bluepics.append(image.load(f"blueenemy/{name}{i:01}.png"))
    return bluepics
def redPics(name,start,end):
    redpics=[]
    for i in range(start,end+1):
        redpics.append(image.load(f"redenemy/{name}{i:01}.png"))
    return redpics
def pinkPics(name,start,end):
    pinkpics=[]
    for i in range(start,end+1):
        pinkpics.append(image.load(f"pinkenemy/{name}{i:01}.png"))
    return pinkpics
def orangePics(name,start,end):
    orangepics=[]
    for i in range(start,end+1):
        orangepics.append(image.load(f"orangeenemy/{name}{i:01}.png"))
    return orangepics

fleeimgs=image.load("pics1/ghostflee.png")


#STARTING POSTIONS FOR GHOSTS AND PACMAN

pacman=[50,40,0 , 0]            
pacmanmove = [0,0]
loadedpacmanmove=[0,0]

blueghost=[580,430,0,0]    
blueghostmove=[-4,0]
redghost=[580,430,0,0]    
redghostmove=[-4,0]
yellowghost=[580,430,0,0]    
yellowghostmove=[-4,0]
orangeghost=[580,430,0,0]    
orangeghostmove=[-4,0]

def level1():

    global lives,powerframe,framecounter,score,high,ghosts,playerspeed,Pause,myClock,mb,framecounterlist
    global pacman,pacmanmove,loadedpacmanmove,blueghost,blueghostmove,redghost,redghostmove,yellowghost,yellowghostmove,orangeghost,orangeghostmove,click


    intro.play() #PLAY INTRO SOUND


    enemies=[blueghost,redghost,yellowghost,orangeghost]                       #LIST OF ghosts
    enemiesmove=[blueghostmove,redghostmove,yellowghostmove,orangeghostmove]   #list of ghost movement/direction
    


    ghosts=[blueghost,redghost,yellowghost,orangeghost]
    ghostsmove=[blueghostmove,redghostmove,yellowghostmove,orangeghostmove]

#STARTING VARAIBLES    
    framecounter=0
    powerframe=0
    lives=3 
    score=0
    

    
    gameboard=image.load("pics1/board.jpg")
    pics=[]

    
##    LOADING IMAGES                 
    blueimgs=[]
    blueimgs.append(bluePics("Blue",1,1))
    blueimgs.append(bluePics("Blue",2,2))
    blueimgs.append(bluePics("Blue",3,3))
    blueimgs.append(bluePics("Blue",4,4))

    redimgs=[]
    redimgs.append(redPics("red",1,1))
    redimgs.append(redPics("red",2,2))
    redimgs.append(redPics("red",3,3))
    redimgs.append(redPics("red",4,4))

    pinkimgs=[]
    pinkimgs.append(pinkPics("pink",1,1))
    pinkimgs.append(pinkPics("pink",2,2))
    pinkimgs.append(pinkPics("pink",3,3))
    pinkimgs.append(pinkPics("pink",4,4))

    orangeimgs=[]
    orangeimgs.append(orangePics("Orange",1,1))
    orangeimgs.append(orangePics("Orange",2,2))
    orangeimgs.append(orangePics("Orange",3,3))
    orangeimgs.append(orangePics("Orange",4,4))
    
                     
    pics.append(addPics("Pacman",5,6))#right facing pics
    pics.append(addPics("Pacman",3,4))#down facing pics
    pics.append(addPics("Pacman",1,2))#up facing pics
    pics.append(addPics("Pacman",7,8))#left facing pics

    depics=deathpics("Death",1,10)

    
    
    running=True
    myClock=time.Clock()
    volumecounter=0 # varaible for mute sound
    walls=makeRects(my2d)
    
    while running:
        click=False
        for evt in event.get():
            if evt.type==QUIT:
                running=False
            if evt.type==MOUSEBUTTONDOWN:
                click=True
        
        mx,my=mouse.get_pos()
        mb=mouse.get_pressed()
        screen.blit(gameboard,(0,0))

        pauseRect=Rect(90,580,50,50) #volume mute buttton

        for i in range(lives):
            heartpic=screen.blit(heart,(i*65+990, 650)) #show amount of hearts based on amount of lives

        framecounter+=1        
        powerframe-=1
        
##        print(powerframe)
##LOADING IMAGES        
        gameover=image.load("pics1/gameover.png")            
        scoretext=font1.render(f"{score:04}",True,"white")
        SCORE=font1.render(f"Score:",True,"white")
        highscore()
        hscore=font2.render(f"High Score:",True,"white",20)
        
        hightext=font2.render(f"{highest}",True,"white")
        
        if lives==0:  #IF DEAD
            framecounter==0  #RESET FRAME COUNTER
        if framecounter>255: #once loaded into the game, wait 255 frames before pacman and one of the ghosts can move
            moveGhost(blueghost,blueghostmove, pacman, walls,ghosts,ghostsmove,enemies,enemiesmove)
       
        if framecounter>400: #wait 400 frames for next ghost - preventing all ghosts to take same path
            moveGhost(redghost,redghostmove, pacman, walls,ghosts,ghostsmove,enemies,enemiesmove)
            
        if framecounter>800:    #wait 800 frames for next ghost
            moveGhost(yellowghost,yellowghostmove, pacman, walls,ghosts,ghostsmove,enemies,enemiesmove)

        if framecounter>1300: #wait 1300 frames for next ghost
            moveGhost(orangeghost,orangeghostmove, pacman, walls,ghosts,ghostsmove,enemies,enemiesmove)

        moveCheck(pacman, pacmanmove,loadedpacmanmove, walls)
        movePlayer(pacman, pacmanmove, loadedpacmanmove, walls)

        
        
##        print(f"{myClock.get_fps():.1f}")
        myClock.tick(60)
        #display.flip()
        for c in coins:
            if Rect(pacman[0],pacman[1],25,30).colliderect(c):
                coins.remove(c)
                score+=10 #get 10 score everytime u eat coin
                eat.play() #eat sound of eating coin
                
        for p in powers:
            if Rect(pacman[0],pacman[1],38,28).colliderect(p):
                powers.remove(p)
                powerframe=500   #start a timer from 500 for how long power last
                
                
##        print(powerframe)
        
        playRect=Rect(397,140,400,110)

        if len(coins)==0:  #RESETTING EVERYTHING WHEN COMPLETE
                            
            framecounter=0

            playerspeed+=2
            
            for coin in makeCoins(my2d):
                coins.append(coin)
            for power in makePowerups(my2d):
                powers.append(power)
                
            pacman=[50,40,0,0]
            pacmanmove = [0,0]
            loadedpacmanmove=[0,0]

            blueghost=[580,430,0,0]    
            blueghostmove=[0,0]
            redghost=[580,430,0,0]    
            redghostmove=[0,0]
            yellowghost=[580,430,0,0]    
            yellowghostmove=[0,0]
            orangeghost=[580,430,0,0]    
            orangeghostmove=[0,0]

        
        framecounterlist=[]
        
        #screen.blit(volumepic,(90,580))
        if click and pauseRect.collidepoint(mx,my):
            volumecounter= volumecounter+1
            print(volumecounter)
            
        if volumecounter%2==0:                #if clicked volume button even # of times - play music
            screen.blit(volumepic,(90,580))                
            intro.set_volume(0.01)
            eat.set_volume(0.01)
            death.set_volume(0.01)
            eatghost.set_volume(0.01)
            lifedeath.set_volume(0.01)
        else:                                        #if clicked volume button odd # of times - stop music
            screen.blit(volumemutepic,(90,580)) 
            intro.set_volume(0)
            eat.set_volume(0)
            death.set_volume(0)
            eatghost.set_volume(0)
            lifedeath.set_volume(0)                

        screen.blit(hightext,(1050,500))   
        screen.blit(SCORE,(30,450))
        screen.blit(scoretext,(50,500))
        screen.blit(hscore,(980,450))
        
        
        
        if drawScene(screen,pacman,walls,pics,pacmanmove,blueghost,redghost,yellowghost,orangeghost,blueimgs,blueghostmove,redimgs,redghostmove,pinkimgs,yellowghostmove,orangeimgs,orangeghostmove,depics) == "menu":            
            return "menu"
    return "menu"


##def level2():
    

'''
This is the IMPORTANT part of this example
The idea is we have a variable (page) that keeps
track of which page we are on. We give control
of the program to the function until it is done and
the program returns the new page it should be on.
'''
page="menu"
while page!="exit":
    if page=="menu":
        page=menu()
    if page=="level1":        
        page=level1()
        
        
##    if page=="pause":
##        page=pause()
    if page=="controls":
        page=controls()
    if page=="credits":
        page=credit()

quit()
